#!/usr/bin/env node

// ๐ DEEP INVESTIGATION: Why backend accepts specific drivers/conductors only
const BASE_URL = 'http://72.60.35.47/api';
const AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjgiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiaGF6ZW1lc3NhbTgxOTk5QGdtYWlsLmNvbSIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2VtYWlsYWRkcmVzcyI6ImhhemVtZXNzYW04MTk5OUBnbWFpbC5jb20iLCJqdGkiOiJjMTc2ZDAwNy03NzNmLTRlZDAtYThjZC1hNWMyNTlhMWNlZTAiLCJpYXQiOjE3NTYzMDgxMzYsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluIiwiZXhwIjoxNzU4OTAwMTM2LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjcxMjYifQ.N4s5Ldqz--KXZfFy4CbF0vx9vnQN3Phhmp3obzfB6r0';

console.log('๐ BACKEND VALIDATION INVESTIGATION');
console.log('ููุงุฐุง ููุจู ุงูู Backend ุณุงุฆููู/ููุณุงุฑููู ูุนูููู ููุทุ');
console.log('โ'.repeat(60));

async function investigateBackendValidation() {
    console.log('๐ก ุฌูุจ ุจูุงูุงุช ูุงููุฉ ููุชุญููู...');
    
    // ุฌูุจ ูู ุงููุณุชุฎุฏููู
    const usersResponse = await fetch(`${BASE_URL}/Users`, {
        headers: { 'Authorization': `Bearer ${AUTH_TOKEN}` }
    });
    
    let users = [];
    if (usersResponse.ok) {
        users = await usersResponse.json();
        if (!Array.isArray(users)) users = users.data || [];
    }
    
    // ุชุตููู ุงููุณุชุฎุฏููู
    const allDrivers = users.filter(u => (u.role || '').toLowerCase() === 'driver');
    const allConductors = users.filter(u => ['conductor', 'supervisor'].includes((u.role || '').toLowerCase()));
    
    console.log(`๐ฅ ุฅุฌูุงูู ุงูุณุงุฆููู: ${allDrivers.length}`);
    console.log(`๐ฅ ุฅุฌูุงูู ุงูููุณุงุฑููู: ${allConductors.length}`);
    console.log('');
    
    // ุงุฎุชุจุงุฑ ูู ุณุงุฆู ูุน ูู ููุณุงุฑู
    console.log('๐งช ุงุฎุชุจุงุฑ ุดุงูู ููู ุงูุชููููุงุช:');
    console.log('');
    
    const workingCombos = [];
    const failedCombos = [];
    
    // ุงุฎุชุจุงุฑ ุนููุฉ ูู ุงูุชููููุงุช (ูุชุฌูุจ ุงูุฅูุฑุงุท ูู ุงูุทูุจุงุช)
    const testDrivers = allDrivers.slice(0, 6); // ุฃูู 6 ุณุงุฆููู
    const testConductors = allConductors.slice(0, 4); // ุฃูู 4 ููุณุงุฑููู
    
    console.log(`๐ ุณูุชู ุงุฎุชุจุงุฑ ${testDrivers.length} ุณุงุฆููู ร ${testConductors.length} ููุณุงุฑููู = ${testDrivers.length * testConductors.length} ุชููููุฉ`);
    console.log('');
    
    let testCount = 0;
    
    for (const driver of testDrivers) {
        for (const conductor of testConductors) {
            testCount++;
            console.log(`${testCount}. Driver ${driver.id} (${driver.firstName}) + Conductor ${conductor.id} (${conductor.firstName})`);
            
            const testTrip = {
                busId: 1,
                driverId: driver.id,
                conductorId: conductor.id,
                startLocation: `Test ${testCount}`,
                endLocation: `End ${testCount}`,
                tripDate: '2025-09-03',
                departureTimeOnly: `${8 + (testCount % 10)}:00`,
                arrivalTimeOnly: `${10 + (testCount % 10)}:00`
            };
            
            try {
                const response = await fetch(`${BASE_URL}/Trip`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${AUTH_TOKEN}`
                    },
                    body: JSON.stringify(testTrip)
                });

                const result = await response.json();
                
                if (result.success) {
                    console.log(`   โ SUCCESS!`);
                    workingCombos.push({
                        driverId: driver.id,
                        driverName: driver.firstName,
                        driverStatus: driver.status,
                        driverRole: driver.role,
                        conductorId: conductor.id,
                        conductorName: conductor.firstName,
                        conductorStatus: conductor.status,
                        conductorRole: conductor.role
                    });
                } else {
                    console.log(`   โ FAILED: ${result.message}`);
                    failedCombos.push({
                        driverId: driver.id,
                        driverName: driver.firstName,
                        driverStatus: driver.status,
                        driverRole: driver.role,
                        conductorId: conductor.id,
                        conductorName: conductor.firstName,
                        conductorStatus: conductor.status,
                        conductorRole: conductor.role,
                        error: result.message
                    });
                }
                
            } catch (error) {
                console.log(`   ๐ฅ ERROR: ${error.message}`);
                failedCombos.push({
                    driverId: driver.id,
                    driverName: driver.firstName,
                    driverStatus: driver.status,
                    driverRole: driver.role,
                    conductorId: conductor.id,
                    conductorName: conductor.firstName,
                    conductorStatus: conductor.status,
                    conductorRole: conductor.role,
                    error: error.message
                });
            }
            
            // ุชุฌูุจ ุฅุบุฑุงู ุงูุฎุงุฏู
            await new Promise(resolve => setTimeout(resolve, 800));
        }
    }
    
    // ุชุญููู ุงููุชุงุฆุฌ
    console.log('\n๐ ุชุญููู ุงููุชุงุฆุฌ:');
    console.log('โ'.repeat(40));
    
    console.log(`โ ูุฌุญ: ${workingCombos.length}/${testCount}`);
    console.log(`โ ูุดู: ${failedCombos.length}/${testCount}`);
    
    if (workingCombos.length > 0) {
        console.log('\nโ ุงูุชููููุงุช ุงููุงุฌุญุฉ:');
        workingCombos.forEach((combo, i) => {
            console.log(`   ${i + 1}. Driver ${combo.driverId} (${combo.driverName}) + Conductor ${combo.conductorId} (${combo.conductorName})`);
            console.log(`      Driver Status: ${combo.driverStatus}, Conductor Status: ${combo.conductorStatus}`);
        });
    }
    
    if (failedCombos.length > 0) {
        console.log('\nโ ุงูุชููููุงุช ุงููุงุดูุฉ ูุฃุณุจุงุจูุง:');
        
        // ุชุฌููุน ุงูุฃุฎุทุงุก ุญุณุจ ุงูููุน
        const errorGroups = {};
        failedCombos.forEach(combo => {
            const error = combo.error;
            if (!errorGroups[error]) {
                errorGroups[error] = [];
            }
            errorGroups[error].push(combo);
        });
        
        Object.entries(errorGroups).forEach(([error, combos]) => {
            console.log(`\n   ๐ "${error}" (${combos.length} ูุฑุฉ):`);
            combos.slice(0, 3).forEach(combo => { // ุนุฑุถ ุฃูู 3 ุฃูุซูุฉ ููุท
                console.log(`      - Driver ${combo.driverId} (${combo.driverName}, ${combo.driverStatus}) + Conductor ${combo.conductorId} (${combo.conductorName}, ${combo.conductorStatus})`);
            });
            if (combos.length > 3) {
                console.log(`      ... ู ${combos.length - 3} ุฃูุซูุฉ ุฃุฎุฑู`);
            }
        });
    }
    
    // ุชุญููู ุงูุฃููุงุท
    console.log('\n๐ ุชุญููู ุงูุฃููุงุท:');
    
    if (workingCombos.length > 0) {
        // ุชุญููู ุงูุณุงุฆููู ุงููุงุฌุญูู
        const workingDriverIds = [...new Set(workingCombos.map(c => c.driverId))];
        const workingConductorIds = [...new Set(workingCombos.map(c => c.conductorId))];
        
        console.log(`๐ ุงูุณุงุฆููู ุงูุฐูู ูุนูููู: ${workingDriverIds.join(', ')}`);
        console.log(`๐ ุงูููุณุงุฑููู ุงูุฐูู ูุนูููู: ${workingConductorIds.join(', ')}`);
        
        // ูุญุต ุงูุฎุตุงุฆุต ุงููุดุชุฑูุฉ
        const workingDrivers = workingCombos.map(c => ({ id: c.driverId, status: c.driverStatus, role: c.driverRole }));
        const workingConductors = workingCombos.map(c => ({ id: c.conductorId, status: c.conductorStatus, role: c.conductorRole }));
        
        const uniqueWorkingDrivers = workingDrivers.filter((driver, index, self) => 
            index === self.findIndex(d => d.id === driver.id)
        );
        
        const uniqueWorkingConductors = workingConductors.filter((conductor, index, self) => 
            index === self.findIndex(c => c.id === conductor.id)
        );
        
        console.log('\n๐ ุฎุตุงุฆุต ุงูุณุงุฆููู ุงููุงุฌุญูู:');
        uniqueWorkingDrivers.forEach(driver => {
            console.log(`   Driver ${driver.id}: Status=${driver.status}, Role=${driver.role}`);
        });
        
        console.log('\n๐ ุฎุตุงุฆุต ุงูููุณุงุฑููู ุงููุงุฌุญูู:');
        uniqueWorkingConductors.forEach(conductor => {
            console.log(`   Conductor ${conductor.id}: Status=${conductor.status}, Role=${conductor.role}`);
        });
    }
    
    // ุงูุงุณุชูุชุงุฌุงุช
    console.log('\n๐ฏ ุงูุงุณุชูุชุงุฌุงุช ูุงูุชูุตูุงุช:');
    
    if (failedCombos.length === 0) {
        console.log('โ ูู ุงูุชููููุงุช ุชุนูู! ุงููุดููุฉ ูุฏ ุชููู ูุคูุชุฉ ุฃู ูู ุญุงูุงุช ุฎุงุตุฉ');
    } else {
        console.log('๐ ุฃุณุจุงุจ ูุญุชููุฉ ููุฑูุถ:');
        console.log('   1. ุจุนุถ ุงููุณุชุฎุฏููู ูุฏ ูููููุง ุบูุฑ ููุนููู ูู ุงููุธุงู ุงูุฏุงุฎูู');
        console.log('   2. ูููุฏ ุจุฑูุฌูุฉ ูู ุงูู Backend (business rules)');
        console.log('   3. ูุดุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฃู ุงูููุฑุณุฉ');
        console.log('   4. ูููุฏ ุฒูููุฉ ุฃู ุชุถุงุฑุจ ูู ุงูุฌุฏููุฉ');
        
        if (workingCombos.length > 0) {
            console.log('\n๐ก ุงูุชูุตูุฉ: ุงุณุชุฎุฏู ุงูุชููููุงุช ุงููุงุฌุญุฉ ูู fallback ูู ุงูู UI');
        }
    }
}

investigateBackendValidation().catch(console.error);
